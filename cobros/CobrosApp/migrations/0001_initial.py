# Generated by Django 4.1.5 on 2023-03-05 00:05

from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from django.contrib.auth.models import Group
from django.contrib.auth.models import Permission
from django.contrib.auth.models import User


def GruposSetData():
    GROUPS = ['Administrador', 'Secretaria', 'Estudiante']
    for group in GROUPS:
        new_group, created = Group.objects.get_or_create(name=group)
        
    ## ASIGNADMOS A CADA GRUPO PERMISOS A DIFERENTES TABLAS
    MODELS = ['student', 'enrollement', 'course', 'cohorte', 'payment', 'user']
    PERMISSIONS = ['view', ] 
    group_admin, created = Group.objects.get_or_create(name='Administrador')
    for model in MODELS:
        for permission in PERMISSIONS:
            name = 'Can {} {}'.format(permission, model)
            print("Creating {}".format(name))
            try:
                model_add_perm = Permission.objects.get(name=name)
                group_admin.permissions.add(model_add_perm)
            except Permission.DoesNotExist:
                pass

    MODELS_SECRETARY=['payment','student','user','enrollement']
    PERMISSIONS_SECRETARY=['view', ]
    group_secretarys, created = Group.objects.get_or_create(name='Secretaria')
    for model in MODELS_SECRETARY:
        for permission in PERMISSIONS_SECRETARY:
            name = 'Can {} {}'.format(permission, model)
            print("Creating {}".format(name))

            try:
                model_add_perm = Permission.objects.get(name=name)
                group_secretarys.permissions.add(model_add_perm)
            except Permission.DoesNotExist:
                pass
            
    MODELS_STUDENT=['payment','user','enrollement','student']
    PERMISSIONS_STUDEN=['view']
    group_students, created = Group.objects.get_or_create(name='Estudiante')
    for model in MODELS_STUDENT:
        for permission in PERMISSIONS_STUDEN:
            name = 'Can {} {}'.format(permission, model)
            print("Creating {}".format(name))

            try:
                model_add_perm = Permission.objects.get(name=name)
                group_students.permissions.add(model_add_perm)
            except Permission.DoesNotExist:
                pass
                #logging.warning("Permission not found with name '{}'.".format(name))



def insert_init_data(apps, schema_editor):
    Status_Pay = apps.get_model('CobrosApp', 'Status_Pay')
    Status_Pay.objects.create(name='PAGADO',codigo='001')
    Status_Pay.objects.create(name='NO PAGADO',codigo='002')

    Tipe_Pay = apps.get_model('CobrosApp', 'Tipe_Pay')
    Tipe_Pay.objects.create(name='CUOTAS',codigo='001')
    Tipe_Pay.objects.create(name='EFECTIVO',codigo='002')
    ## GRUPOS ##
    GruposSetData()

    
    
            

def update_init_data(apps, schema_editor):
    Status_Pay = apps.get_model('CobrosApp', 'Canton')
    Status_Pay.objects.all().delete()

    Tipe_Pay = apps.get_model('app', 'Tipo_Productor')
    Tipe_Pay.objects.all().delete()
     ## GRUPOS ##
    GruposSetData()

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Cohorte',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('date_init', models.DateField(max_length=250)),
                ('date_end', models.DateField(max_length=250)),
                ('cost_effective', models.DecimalField(decimal_places=2, max_digits=19)),
                ('cost_credit', models.DecimalField(decimal_places=2, max_digits=19)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CounterPassword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100)),
                ('count', models.IntegerField(max_length=3)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=250)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Enrollement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cuotas', models.PositiveIntegerField(max_length=10)),
                ('day_limite', models.PositiveIntegerField(max_length=4)),
                ('cash', models.PositiveIntegerField(max_length=10)),
                ('discount', models.PositiveIntegerField(max_length=3)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('cohorte', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='cohortelist', to='CobrosApp.cohorte')),
            ],
        ),
        migrations.CreateModel(
            name='Status_Pay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('codigo', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tipe_Pay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('codigo', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('identification', models.CharField(max_length=11, unique=True)),
                ('cell_phone', models.CharField(max_length=15)),
                ('address', models.CharField(max_length=100)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='userlist', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=20)),
                ('date_pay', models.DateField(max_length=250)),
                ('date_limit', models.DateField(max_length=250)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('enrollement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrrollementlist', to='CobrosApp.enrollement')),
                ('status_pay', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='statuslist', to='CobrosApp.status_pay')),
            ],
        ),
        migrations.AddField(
            model_name='enrollement',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='studentlist', to='CobrosApp.student'),
        ),
        migrations.AddField(
            model_name='enrollement',
            name='tipe_pay',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tipopagolist', to='CobrosApp.tipe_pay'),
        ),
        migrations.AddField(
            model_name='cohorte',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='courselist', to='CobrosApp.course'),
        ),
         migrations.RunPython(insert_init_data,update_init_data),
    ]
